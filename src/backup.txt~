#include <iostream>
#include <vector>

#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Network.hpp>
#include <SFML/Window.hpp>

using namespace std;

const int renderDistance = 1;
const int chunkWidth = 2;
const int cellWidth = 26;
const int chunkCellNum = chunkWidth * chunkWidth;

const int visibleMapWidth = chunkWidth*(renderDistance*2+1)+2;
const int visibleMapCellNum = visibleMapWidth*visibleMapWidth; 

struct Chunk 
{
	int chunk[chunkCellNum];
	int x, y;
};

vector<Chunk> chunks;
sf::Texture tVisibleMap;
sf::Sprite sVisibleMap;
sVisibleMap.setTexture(tVisibleMap);
int chunkx, chunky;
int chunkpx, chunkpy;

int generateChunk(Chunk &chunk, int x, int y)
{
	x = abs(x);
	y = abs(y);
	int num = (x * y) % 5 + 2;
	for (int i = 0; i < chunkCellNum; i++)
		chunk.chunk[i] = num;
	return 0;
}

int getChunkLocation(int x, int y, int &cx, int &cy)
{
	int r = cellWidth * chunkWidth;
	cx = x / r;
	cy = y / r;
	if (x < 0) cx -= 1;
	if (y < 0) cy -= 1;
	return 0;
}

int insertChunkToMap(Chunk chunk, int cx, int cy)
{
	int sx = cx * chunkWidth + 1;
	int sy = cy * chunkWidth + 1;
	for (int i = 0; i < chunkCellNum; i++)
	{
		int x = i % chunkWidth;	
		int y = i / chunkWidth;
		int mapx = x + sx;
		int mapy = y + sy;
		int index = mapy * visibleMapWidth + mapx;
		visibleMap[index] = chunk.chunk[i];
	}
	return 0;
}

int generateVisibleMap(int chunkx, int chunky)
{
	for (int i = 0; i < visibleMapWidth; i++)
		for (int j = 0; j < visibleMapWidth; j++)
		{
			int index = j * visibleMapWidth + i;
			if (i == 0 || i == visibleMapWidth - 1 || j == 0 || j == visibleMapWidth - 1) visibleMap[index] = 1;
			else visibleMap[index] = 0;
		}
	for (int i = -renderDistance; i < renderDistance + 1; i++)
		for (int j = -renderDistance; j < renderDistance + 1; j++)
		{
			Chunk chunk;
			generateChunk(chunk, chunkx + j, chunky + i);
			insertChunkToMap(chunk, j+renderDistance, i+renderDistance);
		}


	return 0;
}


void doTheThing(sf::Sprite &mapsprite)
{
	using namespace sf;

	RenderTexture tVisibleMap;
	tVisibleMap.create(visibleMapWidth, visibleMapWidth);

	RenderTexture textureRect;
	textureRect.create(1, 1);
	textureRect.clear(Color(255,0,0));
	Sprite spriteRect;
	spriteRect.setTexture(textureRect.getTexture());



	tVisibleMap.clear();
	spriteRect.setScale(1, 1);
	for (int i = 0; i < visibleMapWidth; i++) 
		for (int j = 0; j < visibleMapWidth; j++)
		{
			int index = i * visibleMapWidth + j;
			spriteRect.setPosition(j, i);
			int col = 55 + 40 * visibleMap[index];
			textureRect.clear(Color(col, 255, col));
			tVisibleMap.draw(spriteRect);
		}
	tVisibleMap.display();	

	mutex.lock();
	mapsprite.setTexture(tVisibleMap.getTexture());
	mutex.unlock();
}



// EDGING
struct Edge
{
	float sx, sy;
	float ex, ey;
};

vector<Edge> edges;




int main() {
	using namespace sf;
	srand(time(0));
	RenderWindow window;
	window.create(VideoMode(300, 300), "WINDOW");


	RenderTexture textureRect;
	textureRect.create(1, 1);
	textureRect.clear(Color(255,0,0));
	Sprite spriteRect;
	spriteRect.setTexture(textureRect.getTexture());

	RenderTexture tVisibleMap;
	tVisibleMap.create(visibleMapWidth, visibleMapWidth);
	Sprite sVisibleMap;
	sVisibleMap.setTexture(tVisibleMap.getTexture());
	sVisibleMap.setScale(cellWidth, cellWidth);

	View playerView;
	playerView.setSize(300, 300);

	Clock clock;
	Time dt = seconds(0);
	Time timeNow = seconds(0);
	Time lastFrame = seconds(0);
	Time lastSecond = seconds(0);
	int fps = 0;

	int mx, my;
	mx = my = 0;
	bool up, down, left, right;
	up = down = left = right = false;
	bool kw, ks, ka, kd;
	kw = ks = ka = kd = false;
	float x, y;
	x = y = 0;
	int intx, inty;
	intx = x; inty = y;
	int chunkx = 0, chunky = 0;

	generateVisibleMap(chunkx, chunky);

	Event event;
	while(window.isOpen()) {
		dt = clock.getElapsedTime() - timeNow;
		timeNow += dt; 

		// poll events
		while(window.pollEvent(event)) 
		{
			switch (event.type) 
			{
			case Event::Closed:
				window.close();
				break;
			case Event::KeyPressed:
				switch (event.key.code)
				{
				case Keyboard::Up:	up	= true; break;
				case Keyboard::Down:	down	= true; break;
				case Keyboard::Left:	left	= true; break;
				case Keyboard::Right:	right	= true; break;
				case Keyboard::W:	kw	= true; break;
				case Keyboard::S:	ks	= true; break;
				case Keyboard::A:	ka	= true; break;
				case Keyboard::D:	kd	= true; break;
				}
				break;
			case Event::KeyReleased:
				switch (event.key.code)
				{
				case Keyboard::Up:	up	= false; break;
				case Keyboard::Down:	down	= false; break;
				case Keyboard::Left:	left	= false; break;
				case Keyboard::Right:	right	= false; break;
				case Keyboard::W:	kw	= false; break;
				case Keyboard::S:	ks	= false; break;
				case Keyboard::A:	ka	= false; break;
				case Keyboard::D:	kd	= false; break;
				}
				break;
			}
		}

		float n = 200.f*dt.asSeconds();
		if (up) y -= n;
		if (down) y += n;
		if (right) x += n;
		if (left) x -= n;
		if (ka) playerView.rotate(360.f*dt.asSeconds());
		if (kd) playerView.rotate(-360.f*dt.asSeconds());
		if (ks) playerView.zoom(1-0.9f*dt.asSeconds()); 
		if (kw) playerView.zoom(1+0.9f*dt.asSeconds()); 
		playerView.setCenter(x, y);
		intx = x; inty = y;

		int nchunkx, nchunky;
		getChunkLocation(intx, inty, nchunkx, nchunky);
		if (nchunkx != chunkx || nchunky != chunky)
		{
			chunkx = nchunkx; chunky = nchunky;
			generateVisibleMap(chunkx, chunky);
			Thread thing(&doTheThing, sVisibleMap);
			thing.launch();
		}

		if (timeNow - lastSecond >= seconds(1))
		{
			lastSecond = timeNow;
			fps = 0;
		}

		if (timeNow - lastFrame >= milliseconds(17))
		{
			lastFrame = timeNow;
			fps += 1;
			
			window.clear(Color(100,200,255));

			window.setView(playerView);

			// drawing the visible map
			int chunksx = (chunkx*chunkWidth*cellWidth)-(renderDistance*chunkWidth*cellWidth+cellWidth);
			int chunksy = (chunky*chunkWidth*cellWidth)-(renderDistance*chunkWidth*cellWidth+cellWidth);
			sVisibleMap.setPosition(chunksx, chunksy);
			window.draw(sVisibleMap);
			

			spriteRect.setPosition(x-cellWidth/2, y-cellWidth/2);
			spriteRect.setScale(cellWidth, cellWidth);
			textureRect.clear(Color(200,255,0));
			window.draw(spriteRect);

			spriteRect.setPosition(300, 300);
			spriteRect.setScale(200, 200);
			window.draw(spriteRect);

			window.display();

		}

	}

	return 0;
}









#########################################################
#include <iostream>
#include <vector>
#include <cmath>

#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Network.hpp>
#include <SFML/Window.hpp>

using namespace std;

int renderDistance = 1;

const int mapWidth = renderDistance * 2 + 1;
const int mapChunkNum = pow(mapWidth, 2);
const int chunkWidth = 2;
const int chunkCellNum = chunkWidth * chunkWidth;
const int cellWidth = 26;


struct Chunk 
{
	int chunk[chunkCellNum];
	int x, y;
};

Chunk *chunks;
void initChunk(int hello) 
{
    chunks = new Chunk[mapChunkNum];
}

initChunk(99);
sf::Texture tMap;
sf::Sprite sMap;
sMap.setTexture(tMap);
int chunkx, chunky;
int chunkpx, chunkpy;

int generateChunk(Chunk &chunk, int x, int y)
{
	x = abs(x);
	y = abs(y);
	int num = (x * y) % 5 + 2;
	for (int i = 0; i < chunkCellNum; i++)
		chunk.chunk[i] = num;
	return 0;
}

int getChunkLocation(int x, int y, int &cx, int &cy)
{
	int r = cellWidth * chunkWidth;
	cx = x / r;
	cy = y / r;
	if (x < 0) cx -= 1;
	if (y < 0) cy -= 1;
	return 0;
}

void updateChunk(int chunkMovement))
{
	using namespace sf;

	int *newChunks = new Chunk[mapChunkNum];

	switch (chunkMovement)
	{
	case 0: // move up 
	    {
	    chunky -= 1;
	    for (int i = 0; i < mapWidth-1; i++)
		    for (int j = 0; j < mapWidth; j++)
		    {
			index = i * mapWidth + j;
			newIndex = index + mapWidth;
			newChunks[newIndex] = chunks[index];
		    }
	    int i = mapWidth;
	    for (int j = -renderDistance; j < renderDistance; j++)
	    {
		    Chunk chunk;
		    generateChunk(chunk, chunkx, chunky + j);
		    int index = i * mapWidth + j;
		    newChunks[index] = chunk;
	    }
	    }
	    break;

	case 1: // move down
	    {
	    chunky += 1;
	    for (int i = 1; i < mapWidth; i++)
		    for (int j = 0; j < mapWidth; j++)
		    {
			index = i * mapWidth + j;
			newIndex = index - mapWidth;
			newChunks[newIndex] = chunks[index];
		    }
	    int i = 0;
	    for (int j = -renderDistance; j < renderDistance; j++)
	    {
		    Chunk chunk;
		    generateChunk(chunk, chunkx, chunky + j);
		    int index = i * mapWidth + j;
		    newChunks[index] = chunk;
	    }
	    }
	    break;

	case 2: // move left
	    {
	    chunkx -= 1;
	    for (int i = 0; i < mapWidth; i++)
		    for (int j = 0; j < mapWidth - 1; j++)
		    {
			index = i * mapWidth + j;
			newIndex = index + 1;
			newChunks[newIndex] = chunks[index];
		    }
	    int j = 0;
	    for (int i = -renderDistance; i < renderDistance; i++)
	    {
		    Chunk chunk;
		    generateChunk(chunk, chunkx + i, chunky);
		    int index = i * mapWidth + j;
		    newChunks[index] = chunk;
	    }
	    }
	    break;
	    
	case 3: // move right
	    {
	    chunkx += 1;
	    for (int i = 0; i < mapWidth; i++)
		    for (int j = 1; j < mapWidth; j++)
		    {
			index = i * mapWidth + j;
			newIndex = index - 1;
			newChunks[newIndex] = chunks[index];
		    }
	    int j = mapWidth;
	    for (int i = -renderDistance; i < renderDistance; i++)
	    {
		    Chunk chunk;
		    generateChunk(chunk, chunkx + i, chunky);
		    int index = i * mapWidth + j;
		    newChunks[index] = chunk;
	    }
	    }
	    break;
	}
	chunks = newChunks;

	
	// updating sMap
	sf::RenderTexture text;
	text.clear();
	sf::RenderTexture tRect;
	tRect.create(cellWidth);
	sf::Sprite sRect;
	sRect.setTexture(tRect);

	for (int cy = 0; cy < mapWidth; cy++)
		for (int cx = 0; cx < mapWidth; cx++)
			for (int celly = 0; celly < chunkWidth; celly++)
				for (int cellx = 0; cellx < chunkWidth; cellx++)
				{
					int chunkIndex = cy * mapWidth + cx;
					int cellIndex = celly * chunkWidth + cellx;
					int px = (cx * chunkWidth + cellx) * cellWidth;
					int py = (cy * chunkWidth + celly) * cellWidth;
					sRect.setPosition(px, py);

					int col = 40 * chunks[chunkIndex].chunk[cellIndex];
					tRect.clear(sf::Color(col, 255, col));

					text.draw(sRect);
				}
	text.display();
	
	sMap.setTexture(text.getTexture());
}



// EDGING
struct Edge
{
	float sx, sy;
	float ex, ey;
};

vector<Edge> edges;




int main() {
	using namespace sf;
	srand(time(0));
	RenderWindow window;
	window.create(VideoMode(300, 300), "WINDOW");


	RenderTexture textureRect;
	textureRect.create(1, 1);
	textureRect.clear(Color(255,0,0));
	Sprite spriteRect;
	spriteRect.setTexture(textureRect.getTexture());

	View playerView;
	playerView.setSize(300, 300);

	Clock clock;
	Time dt = seconds(0);
	Time timeNow = seconds(0);
	Time lastFrame = seconds(0);
	Time lastSecond = seconds(0);
	int fps = 0;

	bool up, down, left, right;
	up = down = left = right = false;
	bool kw, ks, ka, kd;
	kw = ks = ka = kd = false;
	float x, y;
	x = y = 0;
	int intx, inty;
	intx = x; inty = y;


	Event event;
	while(window.isOpen()) {
		dt = clock.getElapsedTime() - timeNow;
		timeNow += dt; 

		// poll events
		while(window.pollEvent(event)) 
		{
			switch (event.type) 
			{
			case Event::Closed:
				window.close();
				break;
			case Event::KeyPressed:
				switch (event.key.code)
				{
				case Keyboard::Up:	up	= true; break;
				case Keyboard::Down:	down	= true; break;
				case Keyboard::Left:	left	= true; break;
				case Keyboard::Right:	right	= true; break;
				case Keyboard::W:	kw	= true; break;
				case Keyboard::S:	ks	= true; break;
				case Keyboard::A:	ka	= true; break;
				case Keyboard::D:	kd	= true; break;
				}
				break;
			case Event::KeyReleased:
				switch (event.key.code)
				{
				case Keyboard::Up:	up	= false; break;
				case Keyboard::Down:	down	= false; break;
				case Keyboard::Left:	left	= false; break;
				case Keyboard::Right:	right	= false; break;
				case Keyboard::W:	kw	= false; break;
				case Keyboard::S:	ks	= false; break;
				case Keyboard::A:	ka	= false; break;
				case Keyboard::D:	kd	= false; break;
				}
				break;
			}
		}

		float n = 150.f*dt.asSeconds();
		if (up) y -= n;
		if (down) y += n;
		if (right) x += n;
		if (left) x -= n;
		if (ka) playerView.rotate(360.f*dt.asSeconds());
		if (kd) playerView.rotate(-360.f*dt.asSeconds());
		if (ks) playerView.zoom(1-0.9f*dt.asSeconds()); 
		if (kw) playerView.zoom(1+0.9f*dt.asSeconds()); 
		playerView.setCenter(x, y);
		intx = x; inty = y;

		int nchunkx, nchunky;
		getChunkLocation(intx, inty, nchunkx, nchunky);
		int movement = 0;
		if (nchunkx != chunkx || nchunky != chunky)
		    if (nchunkx != chunkx)
		    	if (nchunkx > chunkx)
		    		movement = 3;
		    	else
		    		movemnet = 2
		    else
		    	if (nchunky > chunky)
		    		movement = 1;
		    	else
		    		movement = 0;
		Thread thing(&updateChunks, 3);
		thing.launch();
		if (timeNow - lastSecond >= seconds(1))
		{
			lastSecond = timeNow;
			fps = 0;
		}

		if (timeNow - lastFrame >= milliseconds(17))
		{
			lastFrame = timeNow;
			fps += 1;
			
			window.clear(Color(100,200,255));

			window.setView(playerView);

			// drawing the visible map
			int chunksx = (chunkx*chunkWidth*cellWidth)-(renderDistance*chunkWidth*cellWidth+cellWidth);
			int chunksy = (chunky*chunkWidth*cellWidth)-(renderDistance*chunkWidth*cellWidth+cellWidth);
			sMap.setPosition(chunksx, chunksy);
			window.draw(sMap);
			

			spriteRect.setPosition(x-cellWidth/2, y-cellWidth/2);
			spriteRect.setScale(cellWidth, cellWidth);
			textureRect.clear(Color(200,255,0));
			window.draw(spriteRect);

			spriteRect.setPosition(300, 300);
			spriteRect.setScale(200, 200);
			window.draw(spriteRect);

			window.display();

		}

	}

	return 0;
}













############################################################################
WORKING 

#include <iostream>
#include <vector>
#include <cmath>
#include <thread>

#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Network.hpp>
#include <SFML/Window.hpp>

using namespace std;

struct Chunk
{
	int *cells;
	Chunk(int cx, int cy)
	{
		cells = new int[16];
		// creating the chunk based on cx, cy
		// implement perlin noise later
		//	product of cx and cy for now
		int p = abs(cx * cy);
		for (int i = 0; i < 16; i++)
			cells[i] = p;
	}
};

struct renderChunksParams
{
	int cdx, cdy;
};

class Chunker
{
public:
	int renderDistance;
	int mapWidth;
	int mapChunkNum;
	int chunkWidth;
	int chunkCellNum;
	int cellWidth;

	vector<Chunk> map;

	int curcx, curcy;

	bool isRendering;

	sf::RenderTexture tMap;
	sf::Sprite sMap;

	Chunker(int parRenderDistance, int parChunkWidth, int parCellWidth)
	{
		renderDistance = parRenderDistance;
		mapWidth = renderDistance * 2 + 1;
		mapChunkNum = pow(mapWidth, 2);
		chunkWidth = parChunkWidth;
		chunkCellNum = pow(chunkWidth, 2);
		cellWidth = parCellWidth;

		curcx = curcy = 0;

		isRendering = false;

		tMap.create(mapWidth*chunkWidth*cellWidth, mapWidth*chunkWidth*cellWidth);
		tMap.clear(sf::Color::Red);
		sMap.setTexture(tMap.getTexture());

		// init the map
		map.reserve(mapChunkNum);
		for (int i = 0; i < mapChunkNum; i++)
		{
			int cx = i % mapWidth + curcx;
			int cy = i / mapWidth + curcy;
			map[i] = Chunk(cx, cy);
		}
		renderChunksParams par;
		par.cdx = 0;
		par.cdy = 0;
		renderChunks(par);
	}

	void update(int px, int py)
	{
		if (isRendering) return;
		int cx, cy;
		getChunkLoc(px, py, cx, cy);

		std::cout << px << " " << py << " " << cx << " " << cy << std::endl;

		if (curcx != cx || curcy != cy)
		{
			int cdx = cx - curcx;
			int cdy = cy - curcy;
			renderChunksParams par;
			par.cdx = cdx;
			par.cdy = cdy;
			// sf::Thread thread(&renderChunks, par);
			// thread.launch();
			renderChunks(par);
		}
	}

	void renderChunks(renderChunksParams par)
	{
		int cdx = par.cdx;
		int cdy = par.cdy;

		this->isRendering = true;

		std::cout << "Rendering" << std::endl;

		for (int i = -this->renderDistance; i < this->renderDistance + 1; i++)
		       for (int j = -this->renderDistance; j < this->renderDistance + 1; j++)
		       {
			       int viewx = j + this->renderDistance;
			       int viewy = i + this->renderDistance;
			       int chunkIndex = viewy * this->mapWidth + viewx;

			       map[chunkIndex] = Chunk(curcx + cdx + j, curcy + cdy + i);
		       }	       

		if (abs(cdx) > this->renderDistance || abs(cdy) > this->renderDistance)
		{
			// do a full render
		}
		else
		{
			// partial render 
			// recycle some chunks that are already rendered
		}

		// draw the chunks into the temporary map texture then change the original texture 
		sf::RenderTexture tRect;
		tRect.create(1,1);
		sf::Sprite sRect;
		sRect.setTexture(tRect.getTexture());
		sRect.setScale(cellWidth, cellWidth);
		sf::RenderTexture subtMap;
		subtMap.create(mapWidth*chunkWidth*cellWidth, mapWidth*chunkWidth*cellWidth);
		subtMap.clear();
		sf::Sprite subsMap;
		subsMap.setTexture(subtMap.getTexture());
		for (int cy = 0; cy < this->mapWidth; cy++)
			for (int cx = 0; cx < this->mapWidth; cx++)
				for (int y = 0; y < this->chunkWidth; y++) 
					for (int x = 0; x < this->chunkWidth; x++)
					{
						int chunkIndex = cy * this->mapWidth + cx;
						int cellIndex = y * this->chunkWidth + x;

						int px = (cx * this->chunkWidth + x) * this->cellWidth;
						int py = (cy * this->chunkWidth + y) * this->cellWidth;
						
						sRect.setPosition(px, py);
						int col = 55 + 40 * map[chunkIndex].cells[cellIndex];
						tRect.clear(sf::Color(col, 200, col));
						subtMap.draw(sRect);
					}

		this->tMap.clear();
		subsMap.setPosition(0,0);
		this->tMap.draw(subsMap);

		this->curcx += cdx;
		this->curcy += cdy;

		std::cout << "Done rendering" << std::endl;

		this->isRendering = false;
	}

	void getChunkLoc(int px, int py, int &cx, int &cy)
	{
		int r = cellWidth * chunkWidth;
		cx = px / r;
		cy = py / r;
		if (px < 0) cx -= 1;
		if (py < 0) cy -= 1;
	}

	int getChunksx()
	{
		return (curcx*chunkWidth*cellWidth)-(renderDistance*chunkWidth*cellWidth);	
	}

	int getChunksy()
	{
		return (curcy*chunkWidth*cellWidth)-(renderDistance*chunkWidth*cellWidth); 
	}

};

int main() {
	using namespace sf;
	srand(time(0));
	RenderWindow window;
	window.create(VideoMode(300, 300), "WINDOW");


	RenderTexture textureRect;
	textureRect.create(1, 1);
	textureRect.clear(Color(255,0,0));
	Sprite spriteRect;
	spriteRect.setTexture(textureRect.getTexture());

	View playerView;
	playerView.setSize(300, 300);

	Clock clock;
	Time dt = seconds(0);
	Time timeNow = seconds(0);
	Time lastFrame = seconds(0);
	Time lastSecond = seconds(0);
	int fps = 0;

	bool up, down, left, right;
	up = down = left = right = false;
	bool kw, ks, ka, kd;
	kw = ks = ka = kd = false;
	float x, y;
	x = y = 0;
	int intx, inty;
	intx = x; inty = y;

	Chunker chunker(2, 4, 26);

	Event event;
	while(window.isOpen()) {
		dt = clock.getElapsedTime() - timeNow;
		timeNow += dt; 

		// poll events
		while(window.pollEvent(event)) 
		{
			switch (event.type) 
			{
			case Event::Closed:
				window.close();
				break;
			case Event::KeyPressed:
				switch (event.key.code)
				{
				case Keyboard::Up:	up	= true; break;
				case Keyboard::Down:	down	= true; break;
				case Keyboard::Left:	left	= true; break;
				case Keyboard::Right:	right	= true; break;
				case Keyboard::W:	kw	= true; break;
				case Keyboard::S:	ks	= true; break;
				case Keyboard::A:	ka	= true; break;
				case Keyboard::D:	kd	= true; break;
				}
				break;
			case Event::KeyReleased:
				switch (event.key.code)
				{
				case Keyboard::Up:	up	= false; break;
				case Keyboard::Down:	down	= false; break;
				case Keyboard::Left:	left	= false; break;
				case Keyboard::Right:	right	= false; break;
				case Keyboard::W:	kw	= false; break;
				case Keyboard::S:	ks	= false; break;
				case Keyboard::A:	ka	= false; break;
				case Keyboard::D:	kd	= false; break;
				}
				break;
			}
		}

		float n = 150.f*dt.asSeconds();
		if (up) y -= n;
		if (down) y += n;
		if (right) x += n;
		if (left) x -= n;
		if (ka) playerView.rotate(360.f*dt.asSeconds());
		if (kd) playerView.rotate(-360.f*dt.asSeconds());
		if (ks) playerView.zoom(1-0.9f*dt.asSeconds()); 
		if (kw) playerView.zoom(1+0.9f*dt.asSeconds()); 
		playerView.setCenter(x, y);
		intx = x; inty = y;

		chunker.update(intx, inty);

		if (timeNow - lastSecond >= seconds(1))
		{
			lastSecond = timeNow;
			fps = 0;
		}

		if (timeNow - lastFrame >= milliseconds(17))
		{
			lastFrame = timeNow;
			fps += 1;
			
			window.clear(Color(100,200,255));

			window.setView(playerView);

			// drawing the visible map
			int chunksx = chunker.getChunksx(); 
			int chunksy = chunker.getChunksy();
			Sprite sMap = chunker.sMap;
			sMap.setPosition(chunksx, chunksy);
			window.draw(sMap);
			

			spriteRect.setPosition(x-chunker.cellWidth/2, y-chunker.cellWidth/2);
			spriteRect.setScale(chunker.cellWidth, chunker.cellWidth);
			textureRect.clear(Color(200,255,0));
			window.draw(spriteRect);

			textureRect.clear(Color::Yellow);
			spriteRect.setPosition(300, 300);
			spriteRect.setScale(200, 200);
			window.draw(spriteRect);

			window.display();

		}

	}

	return 0;
}








################################################################################
#include <iostream>
#include <vector>
#include <cmath>
#include <thread>

#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Network.hpp>
#include <SFML/Window.hpp>

using namespace std;


sf::Mutex mutex;

struct Chunk
{
	int *cells;
	Chunk(int cx, int cy)
	{
		cells = new int[16];
		// creating the chunk based on cx, cy
		// implement perlin noise later
		//	product of cx and cy for now
		int p = abs(cx * cy);
		for (int i = 0; i < 16; i++)
			cells[i] = p;
	}
};

class Chunker
{
public:
	int renderDistance;
	int mapWidth; 
	int mapChunkNum;
	int chunkWidth;
	int chunkCellNum;
	int cellWidth; 
	int px, py;

	vector<Chunk> map;

	int curcx, curcy;

	bool isRendering;

	sf::RenderTexture tMap;
	sf::Sprite sMap;

	Chunker(int parRenderDistance, int parChunkWidth, int parCellWidth);

	int getChunksx();

	int getChunksy();

};

Chunker::Chunker(int parRenderDistance, int parChunkWidth, int parCellWidth)
{
	renderDistance = parRenderDistance;
	mapWidth = renderDistance * 2 + 1;
	mapChunkNum = pow(mapWidth, 2);
	chunkWidth = parChunkWidth;
	chunkCellNum = pow(chunkWidth, 2);
	cellWidth = parCellWidth;

	px = py = 0;

	curcx = curcy = 0;

	isRendering = false;

	tMap.create(mapWidth*chunkWidth*cellWidth, mapWidth*chunkWidth*cellWidth);
	tMap.clear(sf::Color::Red);
	sMap.setTexture(tMap.getTexture());

	// init the map
	map.reserve(mapChunkNum);
	for (int i = -renderDistance; i < renderDistance + 1; i++)
		for (int j = -renderDistance; j < renderDistance + 1; j++)
		{
			int cx = j + curcx;
			int cy = i + curcy;
			map[i] = Chunk(cx, cy);
		}
}

int Chunker::getChunksx()
{
	return (curcx*chunkWidth*cellWidth)-(renderDistance*chunkWidth*cellWidth);	
}

int Chunker::getChunksy()
{
	return (curcy*chunkWidth*cellWidth)-(renderDistance*chunkWidth*cellWidth); 
}




void getChunkLoc(int px, int py, int chunkWidthPx, int &cx, int &cy)
{
	int r = chunkWidthPx;
	cx = px / r;
	cy = py / r;
	if (px < 0) cx -= 1;
	if (py < 0) cy -= 1;
}

int renderChunks(Chunker c, int cdx, int cdy)
{
	mutex.lock();
	c.isRendering = true;
	mutex.unlock();

	for (int i = -c.renderDistance; i < c.renderDistance + 1; i++)
	       for (int j = -c.renderDistance; j < c.renderDistance + 1; j++)
	       {
		       int viewx = j + c.renderDistance;
		       int viewy = i + c.renderDistance;
		       int chunkIndex = viewy * c.mapWidth + viewx;
		       c.map[chunkIndex] = Chunk(c.curcx + cdx + j, c.curcy + cdy + i);
	       }	       

	// if (abs(cdx) > c.renderDistance || abs(cdy) > c.renderDistance)
	// {
	// 	// do a full render
	// }
	// else
	// {
	// 	// partial render 
	// 	// recycle some chunks that are already rendered
	// }

	// draw the chunks into the temporary map texture then change the original texture 
	sf::RenderTexture tRect;
	tRect.create(1,1);
	sf::Sprite sRect;
	sRect.setTexture(tRect.getTexture());
	sRect.setScale(c.cellWidth, c.cellWidth);
	sf::RenderTexture subtMap;
	subtMap.create(c.mapWidth*c.chunkWidth*c.cellWidth, c.mapWidth*c.chunkWidth*c.cellWidth);
	subtMap.clear();
	sf::Sprite subsMap;
	subsMap.setTexture(subtMap.getTexture());
	for (int cy = 0; cy < c.mapWidth; cy++)
		for (int cx = 0; cx < c.mapWidth; cx++)
			for (int y = 0; y < c.chunkWidth; y++) 
				for (int x = 0; x < c.chunkWidth; x++)
				{
					int chunkIndex = cy * c.mapWidth + cx;
					int cellIndex = y * c.chunkWidth + x;

					int mpx = (cx * c.chunkWidth + x) * c.cellWidth;
					int mpy = (cy * c.chunkWidth + y) * c.cellWidth;
					
					sRect.setPosition(mpx, mpy);
					int col = 55 + 40 * c.map[chunkIndex].cells[cellIndex];
					tRect.clear(sf::Color(col, 200, col));
					subtMap.draw(sRect);
				}

	mutex.lock();
	c.tMap.clear();
	subsMap.setPosition(0,0);
	c.tMap.draw(subsMap);

	c.curcx += cdx;
	c.curcy += cdy;

	c.isRendering = false;
	mutex.unlock();

	return 0;
}

Chunker c(1, 4, 26);
int aa = 0;

void update()
{
	int renderDistance = c.renderDistance;
	int mapWidth = c.mapWidth;
	int mapChunkNum = c.mapChunkNum;
	int chunkWidth = c.chunkWidth;
	int chunkCellNum = c.chunkCellNum;
	int cellWidth = c.cellWidth;

	int px = c.px;
	int py = c.py;

	int curcx = c.curcx;
	int curcy = c.curcy;



	int cx, cy;
	int chunkWidthPx = cellWidth * chunkWidth;
	getChunkLoc(px, cy, chunkWidthPx, cx, cy);
	int cdx = cx - curcx;
	int cdy = cy - curcy;

	if (cdx == 0 && cdy == 0) 
	{
		c.isRendering = false;
		return;
	}

	for (int i = -renderDistance; i < renderDistance + 1; i++)
	       for (int j = -renderDistance; j < renderDistance + 1; j++)
	       {
		       int viewx = j + renderDistance;
		       int viewy = i + renderDistance;
		       int chunkIndex = viewy * mapWidth + viewx;
		       c.map[chunkIndex] = Chunk(curcx + cdx + j, curcy + cdy + i);
	       }	       

	// if (abs(cdx) > c.renderDistance || abs(cdy) > c.renderDistance)
	// {
	// 	// do a full render
	// }
	// else
	// {
	// 	// partial render 
	// 	// recycle some chunks that are already rendered
	// }
	//


	// draw the chunks into the temporary map texture then change the original texture 
	sf::RenderTexture tRect;
	tRect.create(1,1);
	sf::Sprite sRect;
	sRect.setTexture(tRect.getTexture());
	sRect.setScale(cellWidth, cellWidth);
	sf::RenderTexture subtMap;
	subtMap.create(mapWidth*chunkWidth*cellWidth, mapWidth*chunkWidth*cellWidth);
	subtMap.clear();
	sf::Sprite subsMap;
	subsMap.setTexture(subtMap.getTexture());
	for (int cy = 0; cy < mapWidth; cy++)
		for (int cx = 0; cx < mapWidth; cx++)
			for (int y = 0; y < chunkWidth; y++) 
				for (int x = 0; x < chunkWidth; x++)
				{
					// cout << "update thread" << endl;

					int chunkIndex = cy * mapWidth + cx;
					int cellIndex = y * chunkWidth + x;
					

					int mpx = (cx * chunkWidth + x) * cellWidth;
					int mpy = (cy * chunkWidth + y) * cellWidth;

					sRect.setPosition(mpx, mpy);
					int col = 55 + 40 * c.map[chunkIndex].cells[cellIndex];
					
					tRect.clear(sf::Color(col, 200, col));
					subtMap.draw(sRect);
				}



	c.tMap.clear();
	subsMap.setPosition(0,0);
	c.tMap.draw(subsMap);

	c.curcx += cdx;
	c.curcy += cdy;


	c.isRendering = false;

}

int main() {
	using namespace sf;
	srand(time(0));
	RenderWindow window;
	window.create(VideoMode(300, 300), "WINDOW");


	RenderTexture textureRect;
	textureRect.create(1, 1);
	textureRect.clear(Color(255,0,0));
	Sprite spriteRect;
	spriteRect.setTexture(textureRect.getTexture());

	View playerView;
	playerView.setSize(300, 300);

	Clock clock;
	Time dt = seconds(0);
	Time timeNow = seconds(0);
	Time lastFrame = seconds(0);
	Time lastSecond = seconds(0);
	int fps = 0;

	bool up, down, left, right;
	up = down = left = right = false;
	bool kw, ks, ka, kd;
	kw = ks = ka = kd = false;
	float x, y;
	x = y = 0;
	int intx, inty;
	intx = x; inty = y;

	RenderTexture tMap;
	tMap.create(c.mapWidth*c.chunkWidth*c.cellWidth, c.mapWidth*c.chunkWidth*c.cellWidth);
	tMap.clear(Color::Red);
	tMap.draw(c.sMap);
	tMap.display();
	Sprite sMap;
	sMap.setTexture(tMap.getTexture());


	Event event;
	while(window.isOpen()) {
		dt = clock.getElapsedTime() - timeNow;
		timeNow += dt; 

		// poll events
		while(window.pollEvent(event)) 
		{
			switch (event.type) 
			{
			case Event::Closed:
				window.close();
				break;
			case Event::KeyPressed:
				switch (event.key.code)
				{
				case Keyboard::Up:	up	= true; break;
				case Keyboard::Down:	down	= true; break;
				case Keyboard::Left:	left	= true; break;
				case Keyboard::Right:	right	= true; break;
				case Keyboard::W:	kw	= true; break;
				case Keyboard::S:	ks	= true; break;
				case Keyboard::A:	ka	= true; break;
				case Keyboard::D:	kd	= true; break;
				}
				break;
			case Event::KeyReleased:
				switch (event.key.code)
				{
				case Keyboard::Up:	up	= false; break;
				case Keyboard::Down:	down	= false; break;
				case Keyboard::Left:	left	= false; break;
				case Keyboard::Right:	right	= false; break;
				case Keyboard::W:	kw	= false; break;
				case Keyboard::S:	ks	= false; break;
				case Keyboard::A:	ka	= false; break;
				case Keyboard::D:	kd	= false; break;
				}
				break;
			}
		}

		float n = 150.f*dt.asSeconds();
		if (up) y -= n;
		if (down) y += n;
		if (right) x += n;
		if (left) x -= n;
		if (ka) playerView.rotate(360.f*dt.asSeconds());
		if (kd) playerView.rotate(-360.f*dt.asSeconds());
		if (ks) playerView.zoom(1-0.9f*dt.asSeconds()); 
		if (kw) playerView.zoom(1+0.9f*dt.asSeconds()); 
		playerView.setCenter(x, y);
		intx = x; inty = y;

		c.px = intx;
		c.py = inty;
		if (!c.isRendering)
		{
			tMap.clear();
			tMap.draw(c.sMap);
			tMap.display();
			Thread t(&update);
			t.launch();
		}

		 std::cout << "mainthread" << aa << endl;

		if (timeNow - lastSecond >= seconds(1))
		{
			// std::cout << "FPS: " << fps << std::endl;
			lastSecond = timeNow;
			fps = 0;
		}

		if (timeNow - lastFrame >= milliseconds(17))
		{
			lastFrame = timeNow;
			fps += 1;
			
			window.clear(Color(100,200,255));

			window.setView(playerView);

			// drawing the visible map
			int chunksx = c.getChunksx(); 
			int chunksy = c.getChunksy();
			sMap.setPosition(chunksx, chunksy);
			window.draw(sMap);
			

			spriteRect.setPosition(x-c.cellWidth/2, y-c.cellWidth/2);
			spriteRect.setScale(c.cellWidth, c.cellWidth);
			textureRect.clear(Color(200,255,0));
			window.draw(spriteRect);

			textureRect.clear(Color::Yellow);
			spriteRect.setPosition(300, 300);
			spriteRect.setScale(200, 200);
			window.draw(spriteRect);

			window.display();

		}

	}

	return 0;
}
